#!/usr/bin/env python3

"""
register.py - A helper script to register compiled ABIs to the backend server. Note an ABI id
                is generated by the backend server and is used to identify the ABI. An ABI id
                of 0 refers to the DatasetManager ABI.

Usage:
    python register.py

Dependencies:
    pip install requests
"""

import os
import json
import requests
import secrets
import string
import time

BASE_URL = "http://localhost:5000"
username = "".join(
    secrets.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in range(24)
)
password = "".join(
    secrets.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in range(24)
)

# register an account
def register_account():
    url = BASE_URL + "/api/user"

    data = {"username": username, "password": password}

    response = requests.post(url, json=data)

    assert response.status_code == 201


# login to an account and return the session token
def login():
    url = BASE_URL + "/api/session"

    data = {"username": username, "password": password}

    response = requests.post(url, json=data)

    assert response.status_code == 201

    return {"session": response.json()["session"]["token"]}


# register an ABI
def register_abi(name, abi_path, cookies):
    url = BASE_URL + "/api/abi"

    with open(abi_path, "r") as f:
        abi = json.load(f)

    data = {"name": name, "abi": abi.get("abi")}

    response = requests.post(url, json=data, cookies=cookies)

    assert response.status_code == 201

    print("Registered ABI: " + name)

    if name != "DatasetManager":
        return

    url = BASE_URL + "/api/dataset"

    data = {
        "name": name,
        "description": "DatasetManager Contract",
        "abi_id": response.json()["abi"]["id"],
        "address": abi.get("networks").get("5777").get("address"),
    }

    response = requests.post(url, json=data, cookies=cookies)

    assert response.status_code == 201

    print("Registered Dataset: " + name)


# register all ABIs in the build/ folder
def register_all_abis(cookies):
    for file in os.listdir("build/contracts/"):
        if file.endswith(".json") and not file.startswith("Migrations"):
            name = file.split(".")[0]
            abi_path = "build/contracts/" + file
            register_abi(name, abi_path, cookies)


# logout and delete user account
def logout_delete_account(cookies):
    url = BASE_URL + "/api/session/me"

    response0 = requests.get(url, cookies=cookies)

    assert response0.status_code == 200

    id = response0.json()["user"]["id"]

    url = BASE_URL + "/api/user/" + str(id)

    response = requests.delete(url, cookies=cookies)

    assert response.status_code == 200

    id = response0.json()["session"]["id"]

    url = BASE_URL + "/api/session/" + str(id)

    response = requests.delete(url, cookies=cookies)

    assert response.status_code == 200


if __name__ == "__main__":
    print("Registering ABIs...")
    register_account()
    cookies = login()
    time.sleep(1)
    register_all_abis(cookies)
    logout_delete_account(cookies)
